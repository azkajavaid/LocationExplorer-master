<<<<<<< HEAD
=======
?datasets
library(help = "datasets")
is.na(CO2)
is.na(AirPassengers)
is.na(CO2)
is.na(Nile)
is.na(airquality)
head(airquality)
knitr::opts_chunk$set(echo = TRUE)
lapply(airquality, is.na())
lapply(airquality, is.na)
sum(is.na(airquality)) # sum missing values in airquality
knitr::opts_chunk$set(echo = TRUE)
colnames(airquality)[colSums(is.na(airquality)) > 0]
lapply(airquality, class)
imputeMean <- function(x) {
if (class(x) == "numeric")
{
replace(x, is.na(x), mean(x, na.rm = TRUE))
}
}
ariquality_impute <- lapply(airquality, imputeMean)
sum(is.na(airquality_impute))
sum(is.na(ariquality_impute))
airquality_impute <- lapply(airquality, imputeMean)
lapply(airquality, class)
imputeMean <- function(x) {
if (class(x) == "numeric" | class(x) == "integer")
{
replace(x, is.na(x), mean(x, na.rm = TRUE))
}
}
airquality_impute <- lapply(airquality, imputeMean)
head(airquality_impute)
sum(is.na(airquality_impute))
class(airquality_impute)
as.data.frame(airquality_impute)
airquality_impute <- lapply(airquality, imputeMean)
airquality_impute <- as.data.frame(airquality_impute)
head(airquality_impute)
sum(is.na(airquality_impute))
head(airquality_impute)
knitr::opts_chunk$set(echo = TRUE)
#ggplot(iris)
head(iris)
#ggplot(iris)
ggplot(iris, aes(x = Species)) + geom_bar()
library(ggplot)
library(ggplot2)
ggplot(iris, aes(x = Species)) + geom_bar()
head(iris)
tally(iris$Specieis)
tally(iris$Species)
library(mosaic)
install.packages("mosaic")
library(mosaic)
tally(iris$Species)
head(mtcars)
tally(mtcars$carb)
tally(mtcars$gear)
?mtcars
head(mtcars)
ggplot(mtcars, aes(x = gear)) + geom_bar()
ggplot(mtcars, aes(x = gear)) + geom_bar() + theme_bw()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
has_devel()
devtools::install_github("hadley/devtools")
?has_devel
has_compiler()
install.packages("pkgbuild")
install.packages("pkgbuild")
library(devtools)
?has_devel
install.packages("devtools")
install.packages("devtools")
devtools::install_github("hadley/devtools")
devtools::install_github("hadley/devtools")
remotes::install_github("r-lib/remotes")
devtools::install_github("hadley/devtools")
source("https://install-github.me/mangothecat/callr")
devtools::install_github("hadley/devtools")
?has_devel
library(devtools)
has_devel
has_devel()
?has_devel()
install.packages("rtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(roxygen2)
library(testthat)
library(knitr)
url <- "https://gist.github.com/raw/4506250/devtools.zip"
temp <- file.path(tempdir(), "devtools.zip")
setInternet2(TRUE)
suppressWarnings(download.file(url, temp, mode = "wb"))
install.packages(temp, repos = NULL)
file.remove(temp)
?has_devel
has_devel()
devtools::install_github("hadley/devtools")
source("https://install-github.me/mangothecat/callr")
devtools::install_github("hadley/devtools")
remotes::install_github("r-lib/remotes")
r(function() var(iris[, 1:4]))
source("https://install-github.me/r-lib/callr")
library(callr)
r(function() var(iris[, 1:4]))
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
?has_devel()
has_compiler()
has_devel()
library(devtools)
has_devel()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
?has_devel
?has_devel
?devtools
library(rcall)
>>>>>>> cc960b22b31d45d121c68c6d715302aedf267f66
library(callr)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
has_devel()
?devtools
library(MASS)
head(biopsy)
?biopsy
class(biopsy$V1)
class(biopsy$V4)
80-16
75-16
library(shiny); runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
?actionButton
runApp('Desktop/PackageTestR.R')
?actionButton
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
?actionButton
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
data.frame("No conflicts")
dat <- data.frame("No conflicts")
colnames(dat) <- ""
dat
runApp('Desktop/PackageTestR.R')
data <- data.frame("No package conflicts")
colnames(data) <- ""
data
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
url <- paste("https://rdocumentation.org/api/packages/", "dplyr", "/versions/", "0.7.3", sep = "")
#url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
dat <- fromJSON(txt = url)
packages1 <- data.frame(dat$topics$name)
url2 <- paste("https://rdocumentation.org/api/packages/", "plyr", "/versions/", "1.8.4", sep = "")
dat2 <- fromJSON(txt = url2)
packages2 <- data.frame(dat2$topics$name)
inter <- intersect(packages1$dat.topics.name, packages2$dat2.topics.name)
inter
inter <- data.frame(inter)
inter
colnames(inter) <- "Function Conflicts"
inter
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
inter <- data.frame("No function conflicts")
colnames(inter) <- "Conflicts"
inter
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
dat$topics$title
data_package1 <- cbind(packages1, title1)
title1 <- data.frame(dat$topics$title)
data_package1 <- cbind(packages1, title1)
data_package1
inter <- intersect(packages1$dat.topics.name, packages2$dat2.topics.name)
inter <- data.frame(inter)
inter
inter %>% inner_join(data_package1)
library(dplyr)
inter %>% inner_join(data_package1)
names(inter)
colnames(inter) <- "dat.topics.name"
inter %>% inner_join(data_package1)
inter %>% inner_join(data_package1)
head(inter)
inter2 <- inter %>% inner_join(data_package1)
inter2
head(data_packages2)
packages2 <- data.frame(dat2$topics$name)
title2 <- data.frame(dat2$topics$title)
data_package2 <- cbind(packages2, title2)
head(data_packages2)
head(data_package2)
data_package2 %>% plyr::rename(replace = c("dat2.topics.name" = "dat.topics.name"))
data_packages2 <- data_package2 %>% plyr::rename(replace = c("dat2.topics.name" = "dat.topics.name"))
inter2 %>% inner_join(data_packages2)
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
data_package2 <- data_package2 %>% plyr::rename(replace = c("dat2.topics.name" = "dat.topics.name"))
head(data_package2)
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
url <- paste("https://rdocumentation.org/api/packages/", "plyr", "/versions/", "0.1.1", sep = "")
#url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
dat <- fromJSON(txt = url)
packages2 <- data.frame(dat$topics$name, dat$topics$title)
packages2
runApp('Desktop/PackageTestR.R')
dat
is.null(dat$topics$num)
data.frame(dat$topics)
table <- data.frame(dat$topics)
colnames(table) <- c("No functions in this version of the package")
table <- data.frame("No functions in this version of the package")
colnames(table) <- c("Functions")
table
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
url <- paste("https://rdocumentation.org/api/packages/", "dplyr", "/versions/", "0.7.3", sep = "")
#url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
dat <- fromJSON(txt = url)
dat
is.null(dat$topics$num)
dat$topics$num
dat$topics$title
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/PackageTestR.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
?updateSelectInput
runApp('Desktop/packageTestCopy.R')
url <- paste("https://rdocumentation.org/api/packages/", "dplyr", "/versions/", "0.7.3", sep = "")
#url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
dat <- fromJSON(txt = url)
dat
dat$dependencies
dat$version
dat$title
dat$description
dat$release_date
dat$maintainer
runApp('Desktop/packageTestCopy.R')
dat$package_name, dat$version, dat$title, dat$description, dat$release_date, dat$topics
dat$topics$name
dat$package$name
dat$package$star_count
dat$package$stars
dat$package$versions
cbind(dat$package_name, dat$version, dat$title, dat$description, dat$release_date, dat$maintainer$name, dat$maintainer$email)
data.frame(dat$package_name, dat$version, dat$title, dat$description, dat$release_date, dat$maintainer$name, dat$maintainer$email)
t(data.frame(dat$package_name, dat$version, dat$title, dat$description,
dat$release_date, dat$maintainer$name, dat$maintainer$email))
metrics <- data.frame(dat$package_name, dat$version, dat$title, dat$description,
dat$release_date, dat$maintainer$name, dat$maintainer$email)
metrics
colnames(metrics) <- c("Name", "Version", "Title", "Description", "Release Date", "Maintainer", "Contact")
t(metrics)
dat$created_at
dat$collaborators
dat$pageTitle
dat$package$latest_version_id
dat$package$star_count
dat$package$star_count
dat$package$stars$package_name
dat$package$upvoted
dat$license
dat$copyright
metrics <- data.frame(dat$package_name, dat$version, dat$title, dat$description,
dat$release_date, dat$license, dat$maintainer$name, dat$maintainer$email)
colnames(metrics) <- c("Name", "Version", "Title", "Description", "Release Date", "License", "Maintainer", "Contact")
t(metrics)
dat$fromCache
dat$type
dat$vignettes
dat$canonicalLink
dat$maintainer
metrics_data <- t(metrics)
colnames(metrics_data) <- "Package Metrics"
metrics_data
runApp('Desktop/packageTestCopy.R')
url <- paste("https://rdocumentation.org/api/packages/", "plyr", "/versions/", "0.1.1", sep = "")
#url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
dat <- fromJSON(txt = url)
dat$package_name
dat$version
dat$title
nrow(metrics_data)
metrica_data
metrics_data
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
metrics_data
library(survival)
?pbc
data(ovarian)
?ovarian
fit <- survfit(Surv(time, status) ~ sex, data = lung)
plot(fit)
print(fit)
fit <- survfit(Surv(time, status==2) ~ sex, data = lung)
print(fit)
fit <- survfit(Surv(time, status==1) ~ sex, data = lung)
print(fit)
levels(lung$status)
class(lung$status)
?pbs
attach(veteran)
?veteran
fit <- survfit(Surv(time, status==2) ~ sex, data = lung)
plot(fit)
fit <- survfit(Surv(time, status==1) ~ sex, data = lung)
plot(fit)
data(leukemia)
surv.aml <- survfit(Surv(time,status)~1)
class(leukemia$status)
unique(leukemia$status)
?leukemia
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
url <- paste("https://rdocumentation.org/api/packages/", "Hmisc", sep = "")
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
library(data.table)
head(metrics_data)
dat <- setDT(metrics_data, keep.rownames = TRUE)[]
class(metrics_data)
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
dat <- setDT(data.frame(metrics_data), keep.rownames = TRUE)[]
dat
View(dat)
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
runApp('Desktop/packageTestCopy.R')
library(shiny); runApp('Desktop/packageTestCopy.R')
<<<<<<< HEAD
install.packages("class")
#install.packages("class")
#install.packages("kknn")
library(class)
library(kknn)
# Load the data and view its structure
balance_scale <- read.csv("https://ibm.box.com/shared/static/684jzm7e6fbbssg87yc2v4dy53dgkdew.txt", sep = ",")
str(balance_scale)
# View the first few rows of the data using the head function
# Note: The raw data does not contain any column names
head(balance_scale)
colnames(balance_scale) <- c("Class_Name","Left_Weight", "Left_Distance", "Right_Weight", "Right_Distance")
head(balance_scale)
# Note: We do not need to standardize the data in this instance since the numerical data values lie on the same scale.
# Calculate the products and differences
Right_Product <- balance_scale[,4]*balance_scale[,5]
Left_Product <- balance_scale[,2]*balance_scale[,3]
Differences <- Right_Product-Left_Product
# Add columns for Right_Product, Left_Product and Differences
balance_scale$Right_Product <- Right_Product
balance_scale$Left_Product <- Left_Product
balance_scale$Differences <- Differences
# Use the sample function to create a vector of indices that will be used
set.seed(1234)
ind <- sample(2, nrow(balance_scale), replace=TRUE, prob=c(0.7, 0.3))
# Create the training and test data from the dataset using ind
bscale.train <- balance_scale[ind==1, 6:8]
bscale.test <- balance_scale[ind==2, 6:8]
# Create the target vectors for the training and test data from the dataset using ind
bscale.trainLabels <- balance_scale[ind==1, 1]
bscale.testLabels <- balance_scale[ind==2, 1]
# Use the knn command to make predictions on the Class_Name of the test data
knn_class <- knn(train = bscale.train, test = bscale.test, cl = bscale.trainLabels, k=3)
# Find the number of incorrectly classified points
correct <- which(knn_class == bscale.testLabels, arr.ind = TRUE)
incorrect <- which(knn_class != bscale.testLabels, arr.ind = TRUE)
cat("Number of incorrectly classified points:",length(incorrect),"\n")
# Find the proportion of correctly classified points
proportion_correct <- length(correct)/length(bscale.testLabels)
cat("Proportion of correctly classified points", proportion_correct,"\n")
#install.packages("class")
#install.packages("kknn")
library(class)
library(kknn)
# Load the data and view its structure
balance_scale <- read.csv("https://ibm.box.com/shared/static/684jzm7e6fbbssg87yc2v4dy53dgkdew.txt", sep = ",")
str(balance_scale)
# View the first few rows of the data using the head function
# Note: The raw data does not contain any column names
head(balance_scale)
colnames(balance_scale) <- c("Class_Name","Left_Weight", "Left_Distance", "Right_Weight", "Right_Distance")
head(balance_scale)
# Note: We do not need to standardize the data in this instance since the numerical data values lie on the same scale.
# Calculate the products and differences
Right_Product <- balance_scale[,4]*balance_scale[,5]
Left_Product <- balance_scale[,2]*balance_scale[,3]
Differences <- Right_Product-Left_Product
# Add columns for Right_Product, Left_Product and Differences
balance_scale$Right_Product <- Right_Product
balance_scale$Left_Product <- Left_Product
balance_scale$Differences <- Differences
# Use the sample function to create a vector of indices that will be used
set.seed(1234)
ind <- sample(2, nrow(balance_scale), replace=TRUE, prob=c(0.7, 0.3))
# Create the training and test data from the dataset using ind
bscale.train <- balance_scale[ind==1, 6:8]
bscale.test <- balance_scale[ind==2, 6:8]
# Create the target vectors for the training and test data from the dataset using ind
bscale.trainLabels <- balance_scale[ind==1, 1]
bscale.testLabels <- balance_scale[ind==2, 1]
# Use the knn command to make predictions on the Class_Name of the test data
knn_class <- knn(train = bscale.train, test = bscale.test, cl = bscale.trainLabels, k=3)
# Find the number of incorrectly classified points
correct <- which(knn_class == bscale.testLabels, arr.ind = TRUE)
incorrect <- which(knn_class != bscale.testLabels, arr.ind = TRUE)
cat("Number of incorrectly classified points:",length(incorrect),"\n")
# Find the proportion of correctly classified points
proportion_correct <- length(correct)/length(bscale.testLabels)
cat("Proportion of correctly classified points", proportion_correct,"\n")
# Run the knn regression using the kknn command
knn_reg <- kknn(formula = Differences ~ ., train=bscale.train, test=bscale.test, k=3)
# Find the number of incorrectly classified points
incorrect_reg <- which(knn_reg$fitted.values != bscale.test$Differences, arr.ind = TRUE)
cat("Number of incorrectly classified points:", length(incorrect_reg), "\n");
# Find the proportion of correctly classified points
correct_reg <- which(knn_reg$fitted.values == bscale.test$Differences, arr.ind = TRUE)
cat("Proportion of correctly classified points", length(correct_reg)/length(bscale.test$Differences), "\n")
# Display the first few rows of the regression estimates of the differences and their true values
head(cbind(knn_reg$fitted.values,bscale.test$Differences))
best_reg <- train.kknn(formula = Differences ~ ., data=bscale.train, kmax=8)
best_reg$best.parameters
?kknn
# Run the knn regression using the kknn command
knn_reg <- kknn(formula = Differences ~ ., train=bscale.train, test=bscale.test, k=3)
# Find the number of incorrectly classified points
incorrect_reg <- which(knn_reg$fitted.values != bscale.test$Differences, arr.ind = TRUE)
cat("Number of incorrectly classified points:", length(incorrect_reg), "\n");
# Find the proportion of correctly classified points
correct_reg <- which(knn_reg$fitted.values == bscale.test$Differences, arr.ind = TRUE)
cat("Proportion of correctly classified points", length(correct_reg)/length(bscale.test$Differences), "\n")
best_reg <- train.kknn(formula = Differences ~ ., data=bscale.train, kmax=8)
best_reg$best.parameters
# The kknn function can also be used for classification
knn_class2 <- kknn(formula = Class_Name ~ ., train=subset(balance_scale, select=c(Class_Name,Right_Product,Left_Product,Differences))[ind==1,], test=subset(balance_scale, select=c(Class_Name,Right_Product,Left_Product,Differences))[ind==2,], k=3)
# Find the number of incorrectly classified points
incorrect_class2 <- which(knn_class2$fitted.values != bscale.testLabels, arr.ind = TRUE)
cat("Number of incorrectly classified points:",length(incorrect_class2),"\n")
Now let's try finding the optimal value of k for classification.
best_class <- train.kknn(formula = Class_Name ~ ., data=subset(balance_scale, select=c(Class_Name,Right_Product,Left_Product,Differences))[ind==1,], kmax=8)
best_class$best.parameters
# Using k=1
knn_class3 <- kknn(formula = Class_Name ~ ., train=subset(balance_scale, select=c(Class_Name,Right_Product,Left_Product,Differences))[ind==1,], test=subset(balance_scale, select=c(Class_Name,Right_Product,Left_Product,Differences))[ind==2,], k=1)
# Find the number of incorrectly classified points
incorrect_class3 <- which(knn_class3$fitted.values != bscale.testLabels, arr.ind = TRUE)
cat("Number of incorrectly classified points:", length(incorrect_class3),"\n")
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
setwd("~/Desktop/R-files/LocationExplorer")
runApp()
library(Shiny)
library(shiny)
runApp()
library(styler)
setwd("~/git-style/r-conflicts")
install.packages("styler")
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
setwd("~/git-style/r-conflicts")
setwd("~/git-style/r-conflicts")
styler:::style_active_file()
library(styler)
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
runApp()
setwd("~/git-style/EmilyDickinsonAnalytics")
styler:::style_active_file()
styler:::style_active_file()
install.packages("styler")
install.packages("styler")
styler:::style_pkg()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
runApp()
?styler::style_selection
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
install.packages("styler")
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
runApp('~/git-style/LocationExplorer')
install.packages("styler")
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
runApp('~/git-style/LocationExplorer')
setwd("~/git-style/LocationExplorer")
runApp()
runApp()
runApp()
setwd("~/Desktop/R-files/LocationExplorer")
runApp()
=======
## Only run this example in interactive R sessions
if (interactive()) {
shinyApp(
ui = basicPage(
textInput("txt", "Enter the text to display below:"),
verbatimTextOutput("default"),
verbatimTextOutput("placeholder", placeholder = TRUE)
),
server = function(input, output) {
output$default <- renderText({ input$txt })
output$placeholder <- renderText({ input$txt })
}
)
}
shiny::runApp('Desktop/git-style/TwitterAnalytics')
library(shiny)
?verbatimTextOutput
runApp('Desktop/git-style/TwitterAnalytics')
sessionInfo()
runApp('Desktop/git-style/TwitterAnalytics')
session <- capture.output(data <- sessionInfo())
session
data
capture.output(data <- sessionInfo())
runApp('Desktop/git-style/TwitterAnalytics')
runApp('Desktop/git-style/TwitterAnalytics')
runApp('Desktop/git-style/TwitterAnalytics')
runApp('Desktop/git-style/TwitterAnalytics')
runApp('Desktop/git-style/TwitterAnalytics')
runApp('Desktop/git-style/TwitterAnalytics')
setwd("~/Desktop/git-style/LocationExplorer")
shiny::runApp()
runApp()
runApp()
library(rsconnect)
rsconnect::setAccountInfo(name='aj17',
token='EF03F03D918BBCB4F19F17F4E2841988',
secret='jQazX+PazO+eiJRN5vcucn87uaheWz24CTBYaUEa')
deployApp()
runApp('~/Desktop/git-style/FlightsDelay-StatisticsComprehensive/FlightsApp')
runApp()
styler:::style_active_file()
>>>>>>> cc960b22b31d45d121c68c6d715302aedf267f66
runApp()
